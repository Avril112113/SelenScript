-- package.path = "?/init.lua;libs/?.lua;libs/?/init.lua;libs/?/?.lua;" .. package.path
-- package.cpath = "libs/" .. _VERSION:sub(5) .. "/?.dll;libs/?.dll;" .. package.cpath

-- local SourceMapTraceback = require "test_source_map"


-- local function potato(s)
-- 	assert(type(s) == "string", "`s` is not a string")
-- 	return "potato and " .. s
-- end

-- local function main()
-- 	print(potato({}))  -- Casues assert error
-- end

-- print(debug.traceback())
-- print("------------------------------")
-- print(SourceMapTraceback.traceback())
-- print("------------------------------")
-- xpcall(main, SourceMapTraceback.xpcall_handler)


local _while = while true do
	break 123
end
print("_while", _while)
local _while_complex = while true do
	if true then
		break "from if (good)"
	end
	break "from while (bad)"
end
print("_while_complex", _while_complex)

local _do_simple = do
	break 456
end
print("_do_simple", _do_simple)

local _do_complex = do
	print(-1)
	if true then
		break 789
	end
	print(1)
	print(2)
	print(3)
end
print("_do_complex", _do_complex)

local _forrange = for i=1,10 do
	break 101112
end
print("_forrange", _forrange)

local _foriter = for i, v in pairs({1}) do
	break 131415
end
print("_foriter", _foriter)

local _do_very_complex = do
	while true do
		break "from inner while (bad)"  -- This should produce an error
	end
	break "from do (good)"
end
print("_do_very_complex", _do_very_complex)

local _while_very_complex = while true do
	while true do
		break "from inner while (bad)"  -- This should produce an error
	end
	break
end
print("_while_very_complex", _while_very_complex or "nil (good)")
