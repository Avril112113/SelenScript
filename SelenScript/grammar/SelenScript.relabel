/**** SelenScript ****/

stmt_continue	<- {| {:type:''->"continue":}
						{:start:{}:}
						CONTINUE
						{:finish:{}:}
					|}

stmt_conditional	<- {| {:type:''->"conditional_stmt":}
							{:start:{}:}
							IF Sc {:condition:expression:} Sc
							(
								stmt_continue
							  / stmt_break
							  / stmt_goto
							  / stmt_return
							)
							{:finish:{}:}
						|}

#block Statements
			 / stmt_conditional
#include Statements
			 / stmt_continue
#endblock


decorator	<-	{| {:type:''->"decorator":}
					{:start:{}:}
					'@' Sc {:expr:prefixexpression:}
					{:finish:{}:}
				|}
decorator_list	<-	{| {:type:''->"decorator_list":}
						{:start:{}:}
						decorator (Sc decorator)*
						{:finish:{}:}
					|}

#block PreFunctionStmt
								({:decorators:decorator_list:} Sc)?
#endblock


expr_if	<- {| {:type:''->"ifexpr":}
				{:start:{}:}
				IF Sc {:condition:expression:} Sc THEN Sc {:lhs:expression:} Sc ELSE Sc {:rhs:expression:}
				{:finish:{}:}
			|}

expr_stmt	<- {| {:type:''->"stmt_expr":}
					{:start:{}:}
					{:stmt:
						  stmt_while
						/ stmt_do
						/ stmt_forrange
						/ stmt_foriter
					:}
					{:finish:{}:}
				|}

#block Expressions
			 / expr_if
			 / expr_stmt
#include Expressions
#endblock

#block stmt_break
#include stmt_break
					(Sc {:values:expressionlist_opt:})
#endblock

stmt_op_assign	<- {| {:type:''->"op_assign":}
						{:start:{}:}
						{:names:varlist:} Sc {:op:MATH_OP / BITWISE_OP:} "=" Sc {:values:expressionlist_expect:}
						{:finish:{}:}
					|}

#block stmt_assign
#include stmt_assign
				/ stmt_op_assign
#endblock
