/* Based on lua 5.4 grammar from the docs/reference */
/* assisted from https://github.com/sumneko/lua-language-server/blob/master/server/src/parser/grammar.lua */
chunk	<- block Sp* (!. / ({} {.*} {}->'chunk') -> UNPARSED_INPUT)
block	<- Sp* ({} Scc stmt* Scc {}) -> block

stmt	<- Sc (
		   ';'
		 / decorator_stmt
		 / assign_stmt
		 / call
		 / return
		 / ({} '::' Sc EXP_CP_NAME Sc '::' {}) -> label
		 / ({} BREAK (Sc expr_list)?? (IF Sc expect_expr)?? {}) -> break
		 / ({} CONTINUE (IF Sc expect_expr)?? {}) -> continue
		 / ({} GOTO Sc EXP_CP_NAME (IF Sc expect_expr)?? {}) -> goto
		 / do_stmt
		 / while_stmt
		 / ({} REPEAT block UNTIL Sc expect_expr {}) -> repeat
		 / if_stmt
		 / for_range_stmt
		 / for_each_stmt
		 / function_stmt
		 / attrib_assign_stmt
		 / scoped_assign_stmt
		 / interface_stmt
		 / (expr {}) -> STMT_EXPR
		)

decorator_call	<- '(' Sc (expr_list/{}->MISS_DEC_ARGS) Sc (')'/({} {}->')')->MISSING)
decorator		<- ({} '@' Sc (var_lcall/{}->MISS_EXPR) (decorator_call)?? {}) -> decorator
decorator_list	<- ({} (Sc decorator)+ {}) -> decorator_list
decorator_stmt	<- ({} decorator_list Sc (function_stmt/{}->MISS_DEC) {}) -> decorate

do_stmt	<- ({} DO block Sc (END / ({} {(!END .)* EXPECT_END} {}->'do') -> UNPARSED_INPUT) {}) -> do

while_stmt	<- ({} WHILE Sc expect_expr DO block Sc (END / ({} {(!END .)* EXPECT_END} {}->'while') -> UNPARSED_INPUT) {}) -> while

if_stmt	<- ({} IF Sc expect_expr THEN block
			(({} ELSEIF Sc expect_expr THEN block {}) -> elseif)*
			(({} ELSE block {}) -> else)?
			(END / ({} {(!END .)* EXPECT_END} {}->'if') -> UNPARSED_INPUT)
		   {}) -> if

for_range_stmt	<- ({} FOR Sc EXP_CP_NAME Sc '=' Sc expect_expr Sc ',' Sc expect_expr (Sc ',' Sc expect_expr)?? DO block (END / ({} {(!END .)* EXPECT_END} {}->'for range') -> UNPARSED_INPUT) {}) -> for_range
for_each_stmt	<- ({} FOR Sc name_list IN Sc expr_list DO block (END / ({} {(!END .)* EXPECT_END} {}->'for each') -> UNPARSED_INPUT) {}) -> for_each

function_stmt	<- ({} Ec FUNCTION Sc (funcname/{}->MISS_FUNCNAME) Sc funcbody {}) -> function
				 / ({} OptScopeDef FUNCTION Sc EXP_CP_NAME Sc funcbody {}) -> function

assign_part			<- (typedef_list Sc)?? '=' Sc expr_list
					 / typedef_list NILCP
assign_stmt			<- ({} Ec var_list Sc assign_part {}) -> assign
scoped_assign_stmt	<- ({} ScopeDef Sc name_list Sc (assign_part / NILCP NILCP) {}) -> assign
attrib_assign_stmt	<- ({} {LOCAL} Sc {} EXP_CP_NAME {} Sc '<' Sc {NAME/{}->MISS_NAME} Sc ('>'/({} {}->'>')->MISSING) Sc ({} typedef {} Sc)?? Sc '=' Sc {} expect_expr {}) -> attrib_assign

interface_stmt	<- ({} OptScopeDef INTERFACE Sc EXP_CP_NAME interface_block (END / ({} {(!END .)* EXPECT_END} {}->'interface') -> UNPARSED_INPUT) {}) -> interface
interface_block	<- Sc ((
						interface_var
					  / function_stmt
					) Sc)*
interface_var	<- ({} {NAME} typedef {}) -> param

expect_expr	<- expr / {}->MISS_EXPR NILCP
expr	<- ((value/unary) (Sc ({} {BINARY_OP} {})->math_op Sc (value/unary))+) -> math
		 / unary -> math
		 / do_stmt
		 / while_stmt
		 / for_range_stmt
		 / for_each_stmt
		 / ({} IF Sc expr THEN Sc expr ELSE Sc expr {}) -> if_expr
		 / value
unary	<- ({} {UNARY_OP} {})->math_op Sc (unary/value)

value	<- ({} NIL {}) -> nil
		 / ({} ({TRUE} / {FALSE}) {}) -> bool
		 / Number
		 / String
		 / ({} VAR_ARGS {}) -> var_args
		 / ({} FUNCTION Sc funcbody {}) -> anon_function
		 / var
		 / group
		 / table

group	<- '(' Sc expect_expr Sc (')'/({} {}->')')->MISSING)

index	<- ({} (
				{'['} Sc expect_expr Sc (']'/({} {}->']')->MISSING)
			  / {DOT} Sc EXP_CP_NAME
		       )
			Sc index??
		   {}) -> index
		 / ({} {COLON} Sc EXP_CP_NAME ({} args index?? {}) -> call {}) -> index
		 / ({} args index?? {}) -> call
var		<- ({} Ec {NAME} Sc index?? {}) -> index
		 / ({} Ec group Sc index {}) -> index

var_list		<- ({} var (Sc ',' Sc var)* {}) -> var_list
expr_list		<- ({} expr (Sc ',' Sc expect_expr)* {}) -> expr_list
opt_expr_list	<- ({} (expr (Sc ',' Sc expect_expr)*)? {}) -> expr_list
name_list		<- ({} {NAME} (Sc ',' Sc EXP_CP_NAME)* {}) -> name_list

param			<- ({} {NAME/VAR_ARGS} typedef?? {}) -> param
par_list		<- ({} param (Sc ',' Sc param)* {}) -> par_list
opt_par_list	<- ({} (param (Sc ',' Sc param)*)? {}) -> par_list
funcbody		<- ({} ('('/({} {}->'(')->MISSING) Sc opt_par_list Sc (')'/({} {}->')')->MISSING) (Sc type_return)?? block Sc (END / ({} {(!END .)* EXPECT_END} {}->'funcbody') -> UNPARSED_INPUT) {}) -> funcbody

return		<- ({} RETURN (Sc expr_list)?? (IF Sc expect_expr)?? {}) -> return Sc ';'?

funcindex	<- ({} {DOT/COLON} Sc EXP_CP_NAME (Sc funcindex)?? {}) -> index
funcname	<- ({} Ec             EXP_CP_NAME (Sc funcindex)?? {}) -> index

index_lcall	<- ({} (
					{'['} Sc expr Sc (']'/({} {}->']')->MISSING)
				  / {DOT/COLON} Sc EXP_CP_NAME
				) Sc (index_lcall / &args NILCP) {}) -> index
			 / ({} args (index_lcall / &args NILCP) {}) -> call
var_lcall	<- ({} Ec {NAME} Sc index_lcall?? {}) -> index
args		<- '(' Sc opt_expr_list Sc (')'/({} {}->')')->MISSING) / table / String
call		<- ({} Ec (group / var_lcall) ({} args NILCP {}) -> call {}) -> index

field			<- ({} ('[' Sc expr Sc (']'/({} {}->']')->MISSING) Sc '=' Sc expr / {NAME} Sc '=' Sc expr / expr) {}) -> field
field_list		<- ({} field (Sc FIELD_SEP Sc field)* {}) -> field_list (Sc FIELD_SEP)?
opt_field_list	<- ({} (field (Sc FIELD_SEP Sc field)*)? {}) -> field_list (Sc FIELD_SEP)?
table			<- ({} '{' Sc opt_field_list Sc ('}'/({} {}->'}')->MISSING) {}) -> table

type		<- ({} {ARRAY} Sc '[' type_expr Sc (']'/({} {}->']')->MISSING) {}) -> type_array
			 / ({} {TABLE} Sc '[' type_expr Sc '=' type_expr Sc (']'/({} {}->']')->MISSING) {}) -> type_table
			 / ({} FUNCTION (Sc type_args)?? (Sc type_return)?? {}) -> type_function
			 / Sc ({} {NAME/NIL} {}) -> type !(Sc args)
type_expr	<- ({} type Sc (OR/'|' Sc) type_expr {}) -> type_or
			 / type
type_list	<- ({} type_expr (Sc ',' Sc type_expr)* {}) -> type_list

type_args		<- '(' Sc opt_par_list Sc (')'/({} {}->')')->MISSING)
type_return		<- '->' Sc type_expr
typedef			<- ':' Sc type_expr
typedef_list	<- ':' Sc type_list

/* The rest of the needed stuff */
NILCP <- {}->{nil}

Sc	<- {:_:Scc:}  /* Space Comments (stops captureing anything, its complicated ish)*/
Scc	<- (Comment / Sp)*  /* Space Comments Capture */
Sp	<- ' ' / %nl / %esc_t  /* SPace */

Esc		<- '\' EChar
EChar	<- 'a'
         / 'b'
         / 'f'
         / 'n'
         / 'r'
         / 't'
         / 'v'
         / '\'
         / '"'
         / "'"
         / %nl
         / 'z' (%nl / %s)*
         / 'x' X16 X16
         / [0-9] [0-9]? [0-9]?
         / 'u{' WORD* '}'
         / {} -> INVALID_ESC

STRFormat	<- ('{'!'{' expr ('}' !'}' / ({} {}->'}')->MISSING)) -> STRFormat

LongString	<- ({} '[' {} {:eq: '='* :} {} '[' %nl? {(!LongStringClose .)*} (LongStringClose / {} -> MISS_LONG_BRACKET) {}) -> LongString
LongStringClose	<-  ']' =eq ']'

Comment		 <- LongComment / ({} '--' {(!%nl .)*} {}) -> Comment
LongComment	 <- ({} '--' LongString {}) -> LongComment

String	<- LongString
		 / ({} {'"'} {~(Esc / !%nl !'"' .)*~} ('"' / ({} {}->'"') -> MISSING) {}) -> String
		 / ({} {"'"} {~(Esc / !%nl !"'" .)*~} ("'" / ({} {}->"'") -> MISSING) {}) -> String
		 / ({} 'f' {'"'} (STRFormat / {~(Esc / !%nl !'"' !STRFormat .)+~})* ('"' / ({} {}->'"') -> MISSING) {}) -> FormatString
		 / ({} 'f' {"'"} (STRFormat / {~(Esc / !%nl !"'" !STRFormat .)+~})* ("'" / ({} {}->"'") -> MISSING) {}) -> FormatString
Number	<- Float / Hex / Int
NUM_E	<- [eE] ([+-]? / {}->'+') [0-9]+
Int		<- ({} {[0-9]+NUM_E?} {}) -> Int
Float	<- ({} ({[0-9]* DOT [0-9]+ NUM_E?} / {[0-9]+ DOT [0-9]* NUM_E?}) {}) -> Float
Hex		<- ({} '0' [xX] {X16+ NUM_E?} {}) -> Hex

ScopeDef	<- {GLOBAL/LOCAL}
OptScopeDef	<- ScopeDef/Ec
Ec			<- {}->''  /* Empty Capture */

WORD        <-  [a-zA-Z0-9_]
Cut         <-  !WORD
Rest        <-  (!%nl .)*

X16         <-  [a-fA-F0-9]
NAME		<- (!RESERVED [a-zA-Z_][a-zA-Z_0-9]*) / RESERVED [a-zA-Z_0-9]+
EXPECT_NAME	<- NAME / {}->MISS_NAME
EXP_CP_NAME	<- {NAME} / {}->MISS_NAME NILCP

DOT			<- '.' !'.'
CONCAT		<- '..' !'.'
VAR_ARGS	<- '...'
COLON		<- ':'
FIELD_SEP	<- ',' / ';'
BINARY_OP	<- '^'
			 /* UNARY_OP */
			 / '*' / '/' / '//' / '%'
			 / '+' / '-'
			 / CONCAT
			 / '<<' / '>>'
			 / '&'
			 / '~' (!'=' / &"~=")
			 / '|'
			 / '<=' / '>=' / '<' / '>' / "~=" / "=="
			 / AND
			 / OR
UNARY_OP	<- '-' / NOT / '#' / '~'

RESERVED	<- RESERVED_STMT / NIL / TRUE / FALSE
/* NOTE: this might be out of date, please make sure it is */
RESERVED_STMT	<- AND / OR / DO / BREAK / ELSE / ELSEIF / END / IF / FOR / GOTO
				 / FUNCTION / IN / LOCAL / THEN / REPEAT / RETURN / NOT / WHILE / UNTIL
				 / CONTINUE / AS / EXTENDS / IMPLEMENTS / INTERFACE / GLOBAL

AND         <- Sc 'and' Cut
NOT         <- Sc 'not' Cut
OR          <- Sc 'or' Cut

NIL         <- Sc 'nil' Cut
FALSE       <- Sc 'false' Cut
TRUE        <- Sc 'true' Cut

BREAK       <- Sc 'break' Cut
GOTO        <- Sc 'goto' Cut
CONTINUE	<- Sc 'continue' Cut 

THEN        <- Sc 'then' Cut
			/  Sc ({} {'do'} Cut {}) -> EXPECT_THEN
DO          <- Sc 'do' Cut
			/  Sc ({} {'then'} Cut {}) -> EXPECT_DO
IN          <- Sc 'in' Cut
AS          <- Sc 'as'  Cut
END         <- Sc 'end'  Cut
EXPECT_END	<- END / ({} {}->'end')->MISSING

EXTENDS     <- Sc 'extends' Cut
IMPLEMENTS  <- Sc 'implements' Cut
ELSE        <- Sc 'else' Cut
ELSEIF      <- Sc 'elseif' Cut
IF          <- Sc 'if' Cut
FOR         <- Sc 'for' Cut
FUNCTION    <- Sc 'function' Cut
REPEAT      <- Sc 'repeat' Cut
UNTIL       <- Sc 'until' Cut
WHILE       <- Sc 'while' Cut
INTERFACE   <- Sc 'interface' Cut
RETURN      <- Sc 'return' Cut
LOCAL       <- Sc 'local' Cut
GLOBAL      <- Sc 'global' Cut

TABLE		<- Sc 'table' Cut
ARRAY		<- Sc 'array' Cut
